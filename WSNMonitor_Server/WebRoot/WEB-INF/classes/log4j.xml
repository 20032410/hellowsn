<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/"
	debug="false">
<!--  打印到控制台 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="{%-5p} [%d] &lt;%c&gt; : %m%n" />
		</layout>
	</appender>
<!--  输出到外部文件，   在tomcat下logs文件夹里-->
	<appender name="logfile" class="org.apache.log4j.RollingFileAppender">
		<param name="Threshold" value="DEBUG" />
		<param name="Append" value="true" />
		<param name="MaxFileSize" value="1024KB" />
		<param name="MaxBackupIndex" value="5" />
		<param name="ImmediateFlush" value="true" />
		<param name="File" value="../logs/adnroidpn.log" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="{%-5p} [%d] &lt;%c&gt; : %m%n" />
		</layout>
	</appender>

	<logger name="org.apache.commons.beanutils">
		<level value="INFO" />
	</logger>

	<logger name="org.apache.commons.digester">
		<level value="INFO" />
	</logger>

	<logger name="org.springframework">
		<level value="INFO" />
	</logger>

	<logger name="org.aspectj.weaver">
		<level value="INFO" />
	</logger>

	<logger name="org.directwebremoting">
		<level value="INFO" />
	</logger>
	
	<logger name="org.mortbay.log">
		<level value="INFO" />
	</logger>	

	<logger name="org.hibernate">
		<level value="INFO" />
	</logger>

	<logger name="org.dbunit">
		<level value="INFO" />
	</logger>

	<logger name="httpclient">
		<level value="INFO" />
	</logger>
	
	<!-- <logger name="org.apache">
		<level value="INFO" />
	</logger> -->
	
	<logger name="com.opensymphony">
		<level value="INFO" />
	</logger>

	<root>
		<appender-ref ref="console" />
		<appender-ref ref="logfile" />
	</root>

</log4j:configuration>


<!-- 
Log4j由三个重要的组件构成：日志信息的优先级，日志信息的输出目的地，日志信息的输出格式。日志信息的优先级从高到低有ERROR、WARN、INFO、DEBUG，分别用来指定这条日志信息的重要程度；日志信息的输出目的地指定了日志将打印到控制台还是文件中；而输出格式则控制了日志信息的显示内容。
　　一、定义配置文件

　　其实您也可以完全不使用配置文件，而是在代码中配置Log4j环境。但是，使用配置文件将使您的应用程序更加灵活。Log4j支持两种配置文件格式，一种是XML格式的文件，一种是Java特性文件（键=值）。下面我们介绍使用Java特性文件做为配置文件的方法：

　　1.配置根Logger，其语法为：

　　log4j.rootLogger = [ level ] , appenderName, appenderName, …

　　其中，level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。 appenderName就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。

　　2.配置日志信息输出目的地Appender，其语法为：

　　log4j.appender.appenderName = fully.qualified.name.of.appender.class 
　　log4j.appender.appenderName.option1 = value1 
　　… 
　　log4j.appender.appenderName.option = valueN

　　其中，Log4j提供的appender有以下几种： 
　　org.apache.log4j.ConsoleAppender（控制台）， 
　　org.apache.log4j.FileAppender（文件）， 
　　org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
　　org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）， 
　　org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

　　3.配置日志信息的格式（布局），其语法为：

　　log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class 
　　log4j.appender.appenderName.layout.option1 = value1 
　　… 
　　log4j.appender.appenderName.layout.option = valueN

　　其中，Log4j提供的layout有以下几种： 
　　org.apache.log4j.HTMLLayout（以HTML表格形式布局）， 
　　org.apache.log4j.PatternLayout（可以灵活地指定布局模式）， 
　　org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）， 
　　org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

　　Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下： %m 输出代码中指定的消息

　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
　　%r 输出自应用启动到输出该log信息耗费的毫秒数 
　　%c 输出所属的类目，通常就是所在类的全名 
　　%t 输出产生该日志事件的线程名 
　　%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 
　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)

　　二、在代码中使用Log4j

　　1.得到记录器

　　使用Log4j，第一步就是获取日志记录器，这个记录器将负责控制日志信息。其语法为：

　　public static Logger getLogger( String name)

　　通过指定的名字获得记录器，如果必要的话，则为这个名字创建一个新的记录器。Name一般取本类的名字，比如：

　　static Logger logger = Logger.getLogger ( ServerWithLog4j.class.getName () )

　　2.读取配置文件

　　当获得了日志记录器之后，第二步将配置Log4j环境，其语法为：

　　BasicConfigurator.configure ()： 自动快速地使用缺省Log4j环境。
　　PropertyConfigurator.configure ( String configFilename) ：读取使用Java的特性文件编写的配置文件。
　　DOMConfigurator.configure ( String filename ) ：读取XML形式的配置文件。

　　3.插入记录信息（格式化日志信息）

　　当上两个必要步骤执行完毕，您就可以轻松地使用不同优先级别的日志记录语句插入到您想记录日志的任何地方，其语法如下：

　　Logger.debug ( Object message ) ;
　　Logger.info ( Object message ) ;
　　Logger.warn ( Object message ) ;
　　Logger.error ( Object message ) ;
  -->